UNIT-1
1.What is the fundamental difference between procedural and object-oriented programming paradigms? Provide a brief example to illexample.
1.Procedural Programming focuses on procedures or functions that perform specific tasks. It separates data and functions, emphasizing a step-by-step approach to solve problems. Object-Oriented Programming (OOP) centers around objects that encapsulate data and methods, promoting modularity and reusability.

Example: In procedural programming, you might have separate functions to update and display a user's profile. In OOP, you would create a User object with methods to update and display its own data.

2.Define Object-Oriented Programming (OOP). What are its core characteristics?
2.OOP is a programming paradigm that organizes software design around objects and their interactions. Its core characteristics include encapsulation, inheritance, polymorphism, and abstraction.

3.Explain the concept of "abstraction" within the context of OOP. Why is it important?
3.Abstraction simplifies complex systems by focusing on essential features while hiding unnecessary details. It's crucial for creating modular, maintainable code that's easier to extend or modify.

4.What are the benefits of using OOP over procedural programming?
4.Modularity: OOP promotes modular code through encapsulation.

Reusability: Inheritance and polymorphism enable code reuse.

Flexibility: Easier to modify or extend existing code.

5.Give a real-world example of a problem that is well-suited to be solved using an OOP approach. Explain why.
5.A banking system is well-suited for OOP. You can create classes like Account, Customer, and Transaction, each encapsulating relevant data and methods. This approach models real-world entities and interactions effectively.

6.Define the four key principles of OOP: Encapsulation, Inheritance, Polymorphism, and Abstraction.
6.Encapsulation: Bundles data and methods within objects.

Inheritance: Allows classes to inherit properties from parent classes.

Polymorphism: Enables objects of different classes to be treated as if they were of a common superclass.

Abstraction: Focuses on essential features while hiding details.

7.Explain how encapsulation helps to protect data and create modular code. Give an example using a class and its members.
7.Consider a BankAccount class with private attributes like balance and public methods like deposit and withdraw. Encapsulation protects the balance by controlling access through these methods.
class BankAccount {
private:
    double balance;
public:
    void deposit(double amount) {
        balance += amount;
    }
    void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
        }
    }
};
8.What is inheritance? How does it promote code reuse and maintainability? Provide a simple example using classes.
8.A SavingsAccount class can inherit from BankAccount and add specific features like interest rates.
class SavingsAccount : public BankAccount {
private:
    double interestRate;
public:
    void addInterest() {
        // Calculate and add interest
    }
};
9.Describe polymorphism. How does it contribute to flexibility and extensibility in software design? Give examples of function/operator overloading and function overriding.
9.Function Overloading: Multiple functions with the same name but different parameters.

Function Overriding: A subclass provides a different implementation of a method already defined in its superclass.
class Shape {
public:
    virtual void draw() = 0;
};

class Circle : public Shape {
public:
    void draw() override {
        // Draw a circle
    }
};

class Rectangle : public Shape {
public:
    void draw() override {
        // Draw a rectangle
    }
};
10.Explain the difference between "overloading" and "overriding".
10.Overloading: This is a form of polymorphism where multiple methods with the same name can be defined but with different parameter lists. It allows a class to have multiple methods with the same name but different behaviors based on the input parameters.
class Calculator {
public:
    int add(int a, int b) {
        return a + b;
    }
    double add(double a, double b) {
        return a + b;
    }
};
Overriding: This occurs when a subclass provides a different implementation of a method that is already defined in its superclass. The method name, return type, and parameter list must be identical.
class Shape {
public:
    virtual void draw() = 0;
};

class Circle : public Shape {
public:
    void draw() override {
        // Draw a circle
    }
};
11.List at least three advantages of using OOP in software development.
11.Modularity: OOP divides complex systems into smaller, manageable parts.

Reusability: Code can be reused through inheritance and polymorphism.

Easier Maintenance: Changes can be made to specific objects without affecting the entire system

12.Give examples of application domains where OOP is commonly used (e.g., GUI development, game programming, etc.).
12.GUI Development: OOP is used to create interactive user interfaces.

Game Programming: Games often model real-world objects and behaviors using OOP.

Database Systems: OOP can be used to manage complex data structures and interactions

13.Discuss the impact of OOP on code maintainability and reusability.
13.OOP improves maintainability by allowing changes to be isolated to specific objects or classes. Reusability is enhanced through inheritance and polymorphism, reducing code duplication. 

14.How does OOP contribute to the development of large and complex software systems?
14.OOP helps develop complex systems by organizing code into manageable, interacting objects. This promotes scalability and maintainability by allowing for modular development and easy extension of existing code

15.Explain the benefits of using OOP in software development.
15.Improved Modularity: Simplifies complex systems into manageable parts.

Enhanced Reusability: Reduces code duplication through inheritance and polymorphism.

Better Maintainability: Easier to modify or extend existing code without affecting other parts of the system

16.Describe the basic structure of a C++ program. What are the essential components?
16.A basic C++ program includes:

Header Inclusions: Including necessary libraries.

Namespace Usage: Using namespaces to avoid naming conflicts.

Class Definitions: Defining classes and objects.

Main Function: The entry point of the program.
#include <iostream>

using namespace std;

class HelloWorld {
public:
    void sayHello() {
        cout << "Hello, World!" << endl;
    }
};

int main() {
    HelloWorld hello;
    hello.sayHello();
    return 0;
}
17.Explain the purpose of namespaces in C++. How do they help to avoid naming conflicts?
17.Namespaces help avoid naming conflicts by organizing code into distinct scopes. This ensures that identifiers (like function or variable names) do not clash with those in other parts of the program.
namespace MyNamespace {
    void myFunction() {
        cout << "This is my function." << endl;
    }
}
18.What are identifiers in C++? What rules must be followed when creating them?
18.Identifiers are names given to variables, functions, and classes. They must start with a letter or underscore and cannot contain special characters except underscores.

19.What are the differences between variables and constants in C++? How are they declared?
19.Variables: Store values that can change.

Constants: Store values that cannot change.
int variable = 10; // Variable
const int constant = 20; // Constant

20.Explain how to use control structures (e.g., if-else, for, while) to control the flow of execution in a C++ program. Provide a simple code example
20.Control structures like if-else, for, and while control the flow of execution in a program.
int x = 5;
if (x > 10) {
    cout << "x is greater than 10" << endl;
} else {
    cout << "x is less than or equal to 10" << endl;
}
